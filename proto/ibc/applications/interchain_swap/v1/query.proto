syntax = "proto3";

package ibc.applications.interchain_swap.v1;

option go_package = "github.com/sideprotocol/ibcswap/v6/modules/apps/101-interchain-swap/types";

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "ibc/applications/interchain_swap/v1/param.proto";
import "ibc/applications/interchain_swap/v1/market.proto";
import "ibc/applications/interchain_swap/v1/tx.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";


// Query provides defines the gRPC querier service.
service Query {

  // Params queries all parameters of the ibc-transfer module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ibc/apps/interchainswap/v1/params";
  }

  // EscrowAddress returns the escrow address for a particular port and channel id.
  rpc EscrowAddress(QueryEscrowAddressRequest) returns (QueryEscrowAddressResponse) {
    option (google.api.http).get = "/ibc/apps/interchainswap/v1/channels/{channel_id}/ports/{port_id}/escrow_address";
  }

  // Queries a list of InterchainLiquidityPool items.
  rpc InterchainLiquidityPool    (QueryGetInterchainLiquidityPoolRequest) returns (QueryGetInterchainLiquidityPoolResponse) {
    option (google.api.http).get = "/ibc/apps/interchainswap/v1/interchain_liquidity_pool/{poolId}";
  }
  rpc InterchainLiquidityPoolAll (QueryAllInterchainLiquidityPoolRequest) returns (QueryAllInterchainLiquidityPoolResponse) {
    option (google.api.http).get = "/ibc/apps/interchainswap/v1/interchain_liquidity_pool";
  }

  rpc InterchainLiquidityMyPoolAll (QueryAllInterchainLiquidityMyPoolRequest) returns (QueryAllInterchainLiquidityPoolResponse) {
    option (google.api.http).get = "/ibc/apps/interchainswap/v1/interchain_liquidity_pool/{creator}";
  }
  
  // Queries a list of InterchainMarketMaker items.
  rpc InterchainMarketMaker    (QueryGetInterchainMarketMakerRequest) returns (QueryGetInterchainMarketMakerResponse) {
    option (google.api.http).get = "/ibc/apps/interchainswap/v1/interchain_market_maker/{poolId}";
  
  }
  rpc InterchainMarketMakerAll (QueryAllInterchainMarketMakerRequest) returns (QueryAllInterchainMarketMakerResponse) {
    option (google.api.http).get = "/ibc/apps/interchainswap/v1/interchain_market_maker";
  }
  rpc InterchainMultiDepositOrder(QueryGetInterchainMultiDepositOrderRequest) returns (QueryGetInterchainMultiDepositOrderResponse) {
    option (google.api.http).get = "/ibc/apps/interchainswap/v1/interchain_multi_deposit_orders/{poolId}/{orderId}";
  }

  // rpc InterchainLatestMultiDepositOrder(QueryLatestInterchainMultiDepositOrderRequest) returns (QueryGetInterchainMultiDepositOrderResponse) {
  //   option (google.api.http).get = "/ibc/apps/interchainswap/v1/interchain_multi_deposit_orders/last";
  // }

  // rpc InterchainLatestMultiDepositOrderByCreators(QueryLatestInterchainMultiDepositOrderByCreatorsRequest) returns (QueryGetInterchainMultiDepositOrderResponse) {
  //   option (google.api.http).get = "/ibc/apps/interchainswap/v1/interchain_multi_deposit_orders/{poolId}/{sourceMaker}/{destinationMaker}/last";
  // }


  rpc InterchainMultiDepositOrdersAll(QueryAllInterchainMultiDepositOrdersRequest) returns (QueryAllInterchainMultiDepositOrdersResponse) {
    option (google.api.http).get = "/ibc/apps/interchainswap/v1/interchain_multi_deposit_orders";
  }
}

// QueryOrdersRequest is the request type for the Query/MutliDepositOrder RPC method
message QueryGetInterchainMultiDepositOrderRequest {
  string poolId = 1;
  string orderId = 2;
}
message QueryGetInterchainMultiDepositOrderResponse {
  // params defines the parameters of the module.
  ibc.applications.interchain_swap.v1.MultiAssetDepositOrder order = 1;
}

// QueryOrdersRequest is the request type for the Query/MutliDepositOrder RPC method
message QueryAllInterchainMultiDepositOrdersRequest {
  string poolId = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}
message QueryAllInterchainMultiDepositOrdersResponse {
  // params defines the parameters of the module.
  repeated ibc.applications.interchain_swap.v1.MultiAssetDepositOrder orders = 1;
  cosmos.base.query.v1beta1.PageResponse pagination              = 2;
}

// // Query latest interchain multi-deposit order 
// message QueryLatestInterchainMultiDepositOrderRequest {
//   string poolId = 1;
//   cosmos.base.query.v1beta1.PageRequest pagination = 3;
// }
// // Query latest interchain multi-deposit order by creators 
// message QueryLatestInterchainMultiDepositOrderByCreatorsRequest {
//   string poolId = 1;
//   string sourceMaker = 2;
//   string destinationMaker = 3;
// }


// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  ibc.applications.interchain_swap.v1.Params params = 1;
}

// QueryEscrowAddressRequest is the request type for the EscrowAddress RPC method.
message QueryEscrowAddressRequest {
  // unique port identifier
  string port_id = 1;
  // unique channel identifier
  string channel_id = 2;
}

// QueryEscrowAddressResponse is the response type of the EscrowAddress RPC method.
message QueryEscrowAddressResponse {
  // the escrow account address
  string escrow_address = 1;
}


message QueryGetInterchainLiquidityPoolRequest {
  string poolId = 1;
}

message QueryGetInterchainLiquidityPoolResponse {
  ibc.applications.interchain_swap.v1.InterchainLiquidityPool interchainLiquidityPool = 1 [(gogoproto.nullable) = false];
}


message QueryAllInterchainLiquidityPoolRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}


message QueryAllInterchainLiquidityMyPoolRequest {
  string creator = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}


message QueryAllInterchainLiquidityPoolResponse {
  repeated ibc.applications.interchain_swap.v1.InterchainLiquidityPool                interchainLiquidityPool = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination              = 2;
}

message QueryGetInterchainMarketMakerRequest {
  string poolId = 1;
}

message QueryGetInterchainMarketMakerResponse {
  ibc.applications.interchain_swap.v1.InterchainMarketMaker interchainMarketMaker = 1 [(gogoproto.nullable) = false];
}

message QueryAllInterchainMarketMakerRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInterchainMarketMakerResponse {
  repeated ibc.applications.interchain_swap.v1.InterchainMarketMaker                  interchainMarketMaker = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination            = 2;
}

