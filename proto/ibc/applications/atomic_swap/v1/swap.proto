syntax = "proto3";

package ibc.applications.atomic_swap.v1;

option go_package = "github.com/ibcswap/ibcswap/v6/modules/apps/100-atomic-swap/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

// Params defines the set of IBC swap parameters.
message Params {
  // swap_enabled enables or disables all cross-chain token transfers from this chain.
  bool swap_enabled = 1 [(gogoproto.moretags) = "yaml:\"swap_enabled\""];
  // max_fee_rate set a max value of fee, it's base point, 1/10000
  uint32 max_fee_rate = 2 [(gogoproto.moretags) = "yaml:\"max_fee_rate\""];
}

// OTC
enum Status {
  INITIAL = 0;
  SYNC = 1;
  CANCEL = 2;
  COMPLETE = 3;
}

message SwapMaker {
  // the port on which the packet will be sent
  string source_port = 1 [(gogoproto.moretags) = "yaml:\"source_port\""];
  // the channel by which the packet will be sent
  string source_channel = 2 [(gogoproto.moretags) = "yaml:\"source_channel\""];
  // the tokens to be sell
  cosmos.base.v1beta1.Coin  sell_token = 3 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin  buy_token = 4 [(gogoproto.nullable) = false];
  // the sender address
  string maker_address = 5 [(gogoproto.moretags) = "yaml:\"maker_address\""];
  // the sender's address on the destination chain
  string maker_receiving_address = 6 [(gogoproto.moretags) = "yaml:\"maker_receiving_address\""];
  // if desired_taker is specified,
  // only the desired_taker is allowed to take this order
  // this is address on destination chain
  string desired_taker = 7;
  int64 create_timestamp = 8;
}

message SwapTaker {
  string order_id = 1;
  // the tokens to be sell
  cosmos.base.v1beta1.Coin  sell_token = 2 [(gogoproto.nullable) = false];
  // the sender address
  string taker_address = 3 [(gogoproto.moretags) = "yaml:\"taker_address\""];
  // the sender's address on the destination chain
  string taker_receiving_address = 4 [(gogoproto.moretags) = "yaml:\"taker_receiving_address\""];
  int64 create_timestamp = 5;
}

message AtomicSwapOrder {
  string id = 1;
  SwapMaker maker = 2;
  Status status = 3;
  string channel_id = 4;
  SwapTaker takers = 5;
  int64 cancel_timestamp = 7;
  int64 complete_timestamp = 8;
}

message AtomicSwapPacketAcknowledgement {
  oneof acknowledgement {
    AtomicSwapPacketSuccess success = 1;
    AtomicSwapPacketError error = 2;
  }
}

message AtomicSwapPacketSuccess {
  // This is binary 0x01 base64 encoded
  bytes result = 1;
}

message AtomicSwapPacketError {
  string error = 1;
}