// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/atomic_swap/v1/swap.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OTC
type Status int32

const (
	Status_INITIAL  Status = 0
	Status_SYNC     Status = 1
	Status_CANCEL   Status = 2
	Status_COMPLETE Status = 3
)

var Status_name = map[int32]string{
	0: "INITIAL",
	1: "SYNC",
	2: "CANCEL",
	3: "COMPLETE",
}

var Status_value = map[string]int32{
	"INITIAL":  0,
	"SYNC":     1,
	"CANCEL":   2,
	"COMPLETE": 3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab3ff4471e3e52b, []int{0}
}

// Params defines the set of IBC swap parameters.
type Params struct {
	// swap_enabled enables or disables all cross-chain token transfers from this chain.
	SwapEnabled bool `protobuf:"varint,1,opt,name=swap_enabled,json=swapEnabled,proto3" json:"swap_enabled,omitempty" yaml:"swap_enabled"`
	// max_fee_rate set a max value of fee, it's base point, 1/10000
	MaxFeeRate uint32 `protobuf:"varint,2,opt,name=max_fee_rate,json=maxFeeRate,proto3" json:"max_fee_rate,omitempty" yaml:"max_fee_rate"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab3ff4471e3e52b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSwapEnabled() bool {
	if m != nil {
		return m.SwapEnabled
	}
	return false
}

func (m *Params) GetMaxFeeRate() uint32 {
	if m != nil {
		return m.MaxFeeRate
	}
	return 0
}

type SwapMaker struct {
	// the port on which the packet will be sent
	SourcePort string `protobuf:"bytes,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty" yaml:"source_port"`
	// the channel by which the packet will be sent
	SourceChannel string `protobuf:"bytes,2,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty" yaml:"source_channel"`
	// the tokens to be sell
	SellToken types.Coin `protobuf:"bytes,3,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	BuyToken  types.Coin `protobuf:"bytes,4,opt,name=buy_token,json=buyToken,proto3" json:"buy_token"`
	// the sender address
	MakerAddress string `protobuf:"bytes,5,opt,name=maker_address,json=makerAddress,proto3" json:"maker_address,omitempty" yaml:"maker_address"`
	// the sender's address on the destination chain
	MakerReceivingAddress string `protobuf:"bytes,6,opt,name=maker_receiving_address,json=makerReceivingAddress,proto3" json:"maker_receiving_address,omitempty" yaml:"maker_receiving_address"`
	// if desired_taker is specified,
	// only the desired_taker is allowed to take this order
	// this is address on destination chain
	DesiredTaker    string `protobuf:"bytes,7,opt,name=desired_taker,json=desiredTaker,proto3" json:"desired_taker,omitempty"`
	CreateTimestamp int64  `protobuf:"varint,8,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
}

func (m *SwapMaker) Reset()         { *m = SwapMaker{} }
func (m *SwapMaker) String() string { return proto.CompactTextString(m) }
func (*SwapMaker) ProtoMessage()    {}
func (*SwapMaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab3ff4471e3e52b, []int{1}
}
func (m *SwapMaker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapMaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapMaker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapMaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapMaker.Merge(m, src)
}
func (m *SwapMaker) XXX_Size() int {
	return m.Size()
}
func (m *SwapMaker) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapMaker.DiscardUnknown(m)
}

var xxx_messageInfo_SwapMaker proto.InternalMessageInfo

func (m *SwapMaker) GetSourcePort() string {
	if m != nil {
		return m.SourcePort
	}
	return ""
}

func (m *SwapMaker) GetSourceChannel() string {
	if m != nil {
		return m.SourceChannel
	}
	return ""
}

func (m *SwapMaker) GetSellToken() types.Coin {
	if m != nil {
		return m.SellToken
	}
	return types.Coin{}
}

func (m *SwapMaker) GetBuyToken() types.Coin {
	if m != nil {
		return m.BuyToken
	}
	return types.Coin{}
}

func (m *SwapMaker) GetMakerAddress() string {
	if m != nil {
		return m.MakerAddress
	}
	return ""
}

func (m *SwapMaker) GetMakerReceivingAddress() string {
	if m != nil {
		return m.MakerReceivingAddress
	}
	return ""
}

func (m *SwapMaker) GetDesiredTaker() string {
	if m != nil {
		return m.DesiredTaker
	}
	return ""
}

func (m *SwapMaker) GetCreateTimestamp() int64 {
	if m != nil {
		return m.CreateTimestamp
	}
	return 0
}

type SwapTaker struct {
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// the tokens to be sell
	SellToken types.Coin `protobuf:"bytes,2,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	// the sender address
	TakerAddress string `protobuf:"bytes,3,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address,omitempty" yaml:"taker_address"`
	// the sender's address on the destination chain
	TakerReceivingAddress string `protobuf:"bytes,4,opt,name=taker_receiving_address,json=takerReceivingAddress,proto3" json:"taker_receiving_address,omitempty" yaml:"taker_receiving_address"`
	CreateTimestamp       int64  `protobuf:"varint,5,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
}

func (m *SwapTaker) Reset()         { *m = SwapTaker{} }
func (m *SwapTaker) String() string { return proto.CompactTextString(m) }
func (*SwapTaker) ProtoMessage()    {}
func (*SwapTaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab3ff4471e3e52b, []int{2}
}
func (m *SwapTaker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapTaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapTaker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapTaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapTaker.Merge(m, src)
}
func (m *SwapTaker) XXX_Size() int {
	return m.Size()
}
func (m *SwapTaker) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapTaker.DiscardUnknown(m)
}

var xxx_messageInfo_SwapTaker proto.InternalMessageInfo

func (m *SwapTaker) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *SwapTaker) GetSellToken() types.Coin {
	if m != nil {
		return m.SellToken
	}
	return types.Coin{}
}

func (m *SwapTaker) GetTakerAddress() string {
	if m != nil {
		return m.TakerAddress
	}
	return ""
}

func (m *SwapTaker) GetTakerReceivingAddress() string {
	if m != nil {
		return m.TakerReceivingAddress
	}
	return ""
}

func (m *SwapTaker) GetCreateTimestamp() int64 {
	if m != nil {
		return m.CreateTimestamp
	}
	return 0
}

type AtomicSwapOrder struct {
	Id                string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Maker             *SwapMaker `protobuf:"bytes,2,opt,name=maker,proto3" json:"maker,omitempty"`
	Status            Status     `protobuf:"varint,3,opt,name=status,proto3,enum=ibc.applications.atomic_swap.v1.Status" json:"status,omitempty"`
	ChannelId         string     `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Takers            *SwapTaker `protobuf:"bytes,5,opt,name=takers,proto3" json:"takers,omitempty"`
	CancelTimestamp   int64      `protobuf:"varint,7,opt,name=cancel_timestamp,json=cancelTimestamp,proto3" json:"cancel_timestamp,omitempty"`
	CompleteTimestamp int64      `protobuf:"varint,8,opt,name=complete_timestamp,json=completeTimestamp,proto3" json:"complete_timestamp,omitempty"`
}

func (m *AtomicSwapOrder) Reset()         { *m = AtomicSwapOrder{} }
func (m *AtomicSwapOrder) String() string { return proto.CompactTextString(m) }
func (*AtomicSwapOrder) ProtoMessage()    {}
func (*AtomicSwapOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab3ff4471e3e52b, []int{3}
}
func (m *AtomicSwapOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AtomicSwapOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AtomicSwapOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AtomicSwapOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomicSwapOrder.Merge(m, src)
}
func (m *AtomicSwapOrder) XXX_Size() int {
	return m.Size()
}
func (m *AtomicSwapOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomicSwapOrder.DiscardUnknown(m)
}

var xxx_messageInfo_AtomicSwapOrder proto.InternalMessageInfo

func (m *AtomicSwapOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AtomicSwapOrder) GetMaker() *SwapMaker {
	if m != nil {
		return m.Maker
	}
	return nil
}

func (m *AtomicSwapOrder) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_INITIAL
}

func (m *AtomicSwapOrder) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *AtomicSwapOrder) GetTakers() *SwapTaker {
	if m != nil {
		return m.Takers
	}
	return nil
}

func (m *AtomicSwapOrder) GetCancelTimestamp() int64 {
	if m != nil {
		return m.CancelTimestamp
	}
	return 0
}

func (m *AtomicSwapOrder) GetCompleteTimestamp() int64 {
	if m != nil {
		return m.CompleteTimestamp
	}
	return 0
}

type AtomicSwapPacketAcknowledgement struct {
	// Types that are valid to be assigned to Acknowledgement:
	//
	//	*AtomicSwapPacketAcknowledgement_Success
	//	*AtomicSwapPacketAcknowledgement_Error
	Acknowledgement isAtomicSwapPacketAcknowledgement_Acknowledgement `protobuf_oneof:"acknowledgement"`
}

func (m *AtomicSwapPacketAcknowledgement) Reset()         { *m = AtomicSwapPacketAcknowledgement{} }
func (m *AtomicSwapPacketAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*AtomicSwapPacketAcknowledgement) ProtoMessage()    {}
func (*AtomicSwapPacketAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab3ff4471e3e52b, []int{4}
}
func (m *AtomicSwapPacketAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AtomicSwapPacketAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AtomicSwapPacketAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AtomicSwapPacketAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomicSwapPacketAcknowledgement.Merge(m, src)
}
func (m *AtomicSwapPacketAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *AtomicSwapPacketAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomicSwapPacketAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_AtomicSwapPacketAcknowledgement proto.InternalMessageInfo

type isAtomicSwapPacketAcknowledgement_Acknowledgement interface {
	isAtomicSwapPacketAcknowledgement_Acknowledgement()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AtomicSwapPacketAcknowledgement_Success struct {
	Success *AtomicSwapPacketSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof" json:"success,omitempty"`
}
type AtomicSwapPacketAcknowledgement_Error struct {
	Error *AtomicSwapPacketError `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*AtomicSwapPacketAcknowledgement_Success) isAtomicSwapPacketAcknowledgement_Acknowledgement() {}
func (*AtomicSwapPacketAcknowledgement_Error) isAtomicSwapPacketAcknowledgement_Acknowledgement()   {}

func (m *AtomicSwapPacketAcknowledgement) GetAcknowledgement() isAtomicSwapPacketAcknowledgement_Acknowledgement {
	if m != nil {
		return m.Acknowledgement
	}
	return nil
}

func (m *AtomicSwapPacketAcknowledgement) GetSuccess() *AtomicSwapPacketSuccess {
	if x, ok := m.GetAcknowledgement().(*AtomicSwapPacketAcknowledgement_Success); ok {
		return x.Success
	}
	return nil
}

func (m *AtomicSwapPacketAcknowledgement) GetError() *AtomicSwapPacketError {
	if x, ok := m.GetAcknowledgement().(*AtomicSwapPacketAcknowledgement_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AtomicSwapPacketAcknowledgement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AtomicSwapPacketAcknowledgement_Success)(nil),
		(*AtomicSwapPacketAcknowledgement_Error)(nil),
	}
}

type AtomicSwapPacketSuccess struct {
	// This is binary 0x01 base64 encoded
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AtomicSwapPacketSuccess) Reset()         { *m = AtomicSwapPacketSuccess{} }
func (m *AtomicSwapPacketSuccess) String() string { return proto.CompactTextString(m) }
func (*AtomicSwapPacketSuccess) ProtoMessage()    {}
func (*AtomicSwapPacketSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab3ff4471e3e52b, []int{5}
}
func (m *AtomicSwapPacketSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AtomicSwapPacketSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AtomicSwapPacketSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AtomicSwapPacketSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomicSwapPacketSuccess.Merge(m, src)
}
func (m *AtomicSwapPacketSuccess) XXX_Size() int {
	return m.Size()
}
func (m *AtomicSwapPacketSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomicSwapPacketSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_AtomicSwapPacketSuccess proto.InternalMessageInfo

func (m *AtomicSwapPacketSuccess) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type AtomicSwapPacketError struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *AtomicSwapPacketError) Reset()         { *m = AtomicSwapPacketError{} }
func (m *AtomicSwapPacketError) String() string { return proto.CompactTextString(m) }
func (*AtomicSwapPacketError) ProtoMessage()    {}
func (*AtomicSwapPacketError) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab3ff4471e3e52b, []int{6}
}
func (m *AtomicSwapPacketError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AtomicSwapPacketError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AtomicSwapPacketError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AtomicSwapPacketError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomicSwapPacketError.Merge(m, src)
}
func (m *AtomicSwapPacketError) XXX_Size() int {
	return m.Size()
}
func (m *AtomicSwapPacketError) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomicSwapPacketError.DiscardUnknown(m)
}

var xxx_messageInfo_AtomicSwapPacketError proto.InternalMessageInfo

func (m *AtomicSwapPacketError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("ibc.applications.atomic_swap.v1.Status", Status_name, Status_value)
	proto.RegisterType((*Params)(nil), "ibc.applications.atomic_swap.v1.Params")
	proto.RegisterType((*SwapMaker)(nil), "ibc.applications.atomic_swap.v1.SwapMaker")
	proto.RegisterType((*SwapTaker)(nil), "ibc.applications.atomic_swap.v1.SwapTaker")
	proto.RegisterType((*AtomicSwapOrder)(nil), "ibc.applications.atomic_swap.v1.AtomicSwapOrder")
	proto.RegisterType((*AtomicSwapPacketAcknowledgement)(nil), "ibc.applications.atomic_swap.v1.AtomicSwapPacketAcknowledgement")
	proto.RegisterType((*AtomicSwapPacketSuccess)(nil), "ibc.applications.atomic_swap.v1.AtomicSwapPacketSuccess")
	proto.RegisterType((*AtomicSwapPacketError)(nil), "ibc.applications.atomic_swap.v1.AtomicSwapPacketError")
}

func init() {
	proto.RegisterFile("ibc/applications/atomic_swap/v1/swap.proto", fileDescriptor_7ab3ff4471e3e52b)
}

var fileDescriptor_7ab3ff4471e3e52b = []byte{
	// 878 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x6e, 0xdb, 0x46,
	0x10, 0xc6, 0x45, 0xc9, 0xd6, 0x9f, 0xb1, 0x64, 0x2b, 0x5b, 0x3b, 0x96, 0x03, 0x54, 0x32, 0xd8,
	0x43, 0x5d, 0x03, 0x26, 0xa3, 0x14, 0x48, 0x9b, 0xa0, 0x69, 0x2d, 0x09, 0x2a, 0x22, 0xc0, 0x71,
	0x8c, 0xb5, 0x2e, 0xf5, 0x85, 0x58, 0x2e, 0xb7, 0x0a, 0x61, 0x92, 0x2b, 0x70, 0x57, 0x72, 0x7c,
	0xea, 0x2b, 0xf4, 0x41, 0xfa, 0x20, 0x39, 0xe6, 0x58, 0xf4, 0x20, 0xb4, 0xf6, 0x03, 0x14, 0xd0,
	0x13, 0x14, 0xdc, 0xa5, 0x6c, 0x59, 0x95, 0xe1, 0xe4, 0x44, 0xcd, 0x7e, 0xf3, 0x8d, 0x86, 0xbf,
	0x19, 0x92, 0xb0, 0xef, 0xbb, 0xd4, 0x26, 0xc3, 0x61, 0xe0, 0x53, 0x22, 0x7d, 0x1e, 0x09, 0x9b,
	0x48, 0x1e, 0xfa, 0xd4, 0x11, 0x17, 0x64, 0x68, 0x8f, 0x9b, 0x76, 0x72, 0xb5, 0x86, 0x31, 0x97,
	0x1c, 0x35, 0x7c, 0x97, 0x5a, 0xf3, 0xb9, 0xd6, 0x5c, 0xae, 0x35, 0x6e, 0x3e, 0xd9, 0x1c, 0xf0,
	0x01, 0x57, 0xb9, 0x76, 0xf2, 0x4b, 0xdb, 0x9e, 0xd4, 0x29, 0x17, 0x21, 0x17, 0xb6, 0x4b, 0x04,
	0xb3, 0xc7, 0x4d, 0x97, 0x49, 0xd2, 0xb4, 0x29, 0xf7, 0x23, 0xad, 0x9b, 0xbf, 0x41, 0xfe, 0x84,
	0xc4, 0x24, 0x14, 0xe8, 0x25, 0x94, 0x93, 0x52, 0x0e, 0x8b, 0x88, 0x1b, 0x30, 0xaf, 0x66, 0xec,
	0x1a, 0x7b, 0xc5, 0xf6, 0xf6, 0x74, 0xd2, 0xf8, 0xe2, 0x92, 0x84, 0xc1, 0x4b, 0x73, 0x5e, 0x35,
	0xf1, 0x5a, 0x12, 0x76, 0x75, 0x84, 0x5e, 0x40, 0x39, 0x24, 0xef, 0x9d, 0x5f, 0x19, 0x73, 0x62,
	0x22, 0x59, 0x2d, 0xbb, 0x6b, 0xec, 0x55, 0xe6, 0xbd, 0xf3, 0xaa, 0x89, 0x21, 0x24, 0xef, 0x7f,
	0x66, 0x0c, 0x27, 0xc1, 0xbf, 0x39, 0x28, 0x9d, 0x5e, 0x90, 0xe1, 0x1b, 0x72, 0xce, 0x62, 0xf4,
	0x1d, 0xac, 0x09, 0x3e, 0x8a, 0x29, 0x73, 0x86, 0x3c, 0x96, 0xaa, 0x87, 0x52, 0xfb, 0xf1, 0x74,
	0xd2, 0x40, 0x69, 0x0f, 0xb7, 0xa2, 0x89, 0x41, 0x47, 0x27, 0x3c, 0x96, 0xe8, 0x10, 0xd6, 0x53,
	0x8d, 0xbe, 0x23, 0x51, 0xc4, 0x02, 0xd5, 0x43, 0xa9, 0xbd, 0x33, 0x9d, 0x34, 0xb6, 0xee, 0x78,
	0x53, 0xdd, 0xc4, 0x15, 0x7d, 0xd0, 0xd1, 0x31, 0xfa, 0x11, 0x40, 0xb0, 0x20, 0x70, 0x24, 0x3f,
	0x67, 0x51, 0x2d, 0xb7, 0x6b, 0xec, 0xad, 0x3d, 0xdb, 0xb1, 0x34, 0x3e, 0x2b, 0xc1, 0x67, 0xa5,
	0xf8, 0xac, 0x0e, 0xf7, 0xa3, 0xf6, 0xca, 0x87, 0x49, 0x23, 0x83, 0x4b, 0x89, 0xa5, 0x9f, 0x38,
	0xd0, 0x0f, 0x50, 0x72, 0x47, 0x97, 0xa9, 0x7d, 0xe5, 0xd3, 0xec, 0x45, 0x77, 0x74, 0xa9, 0xdd,
	0xaf, 0xa0, 0x12, 0x26, 0x04, 0x1c, 0xe2, 0x79, 0x31, 0x13, 0xa2, 0xb6, 0xaa, 0xda, 0xaf, 0x4d,
	0x27, 0x8d, 0xcd, 0x19, 0xc2, 0x39, 0xd9, 0xc4, 0x65, 0x15, 0xb7, 0x74, 0x88, 0xce, 0x60, 0x5b,
	0xeb, 0x31, 0xa3, 0xcc, 0x1f, 0xfb, 0xd1, 0xe0, 0xa6, 0x50, 0x5e, 0x15, 0x32, 0xa7, 0x93, 0x46,
	0x7d, 0xbe, 0xd0, 0xff, 0x12, 0x4d, 0xbc, 0xa5, 0x14, 0x3c, 0x13, 0x66, 0xb5, 0xbf, 0x82, 0x8a,
	0xc7, 0x84, 0x1f, 0x33, 0xcf, 0x91, 0x49, 0x42, 0xad, 0x90, 0x54, 0xc4, 0xe5, 0xf4, 0xb0, 0xaf,
	0x06, 0xf7, 0x0d, 0x54, 0x69, 0xcc, 0x88, 0x64, 0x8e, 0xf4, 0x43, 0x26, 0x24, 0x09, 0x87, 0xb5,
	0xe2, 0xae, 0xb1, 0x97, 0xc3, 0x1b, 0xfa, 0xbc, 0x3f, 0x3b, 0x36, 0xff, 0xc8, 0xea, 0x89, 0x6b,
	0xe3, 0x0e, 0x14, 0x79, 0xec, 0xb1, 0xd8, 0xf1, 0xf5, 0xca, 0x95, 0x70, 0x41, 0xc5, 0x3d, 0x6f,
	0x61, 0x22, 0xd9, 0xcf, 0x9e, 0xc8, 0x2b, 0xa8, 0xc8, 0x3b, 0x4c, 0x73, 0x8b, 0x4c, 0xe5, 0x02,
	0x53, 0xb9, 0xc0, 0x54, 0xde, 0xc3, 0x74, 0x65, 0x91, 0xa9, 0xbc, 0x97, 0xa9, 0x5c, 0xca, 0x74,
	0x19, 0xae, 0xd5, 0xe5, 0xb8, 0xfe, 0xc9, 0xc2, 0x46, 0x4b, 0x3d, 0xea, 0x09, 0xb4, 0xb7, 0x09,
	0x1b, 0xb4, 0x0e, 0xd9, 0x1b, 0x5c, 0x59, 0xdf, 0x43, 0x87, 0xb0, 0xaa, 0x66, 0x97, 0x42, 0xda,
	0xb7, 0x1e, 0x78, 0x59, 0x58, 0x37, 0x4f, 0x1c, 0xd6, 0x46, 0xf4, 0x13, 0xe4, 0x85, 0x24, 0x72,
	0xa4, 0x21, 0xad, 0x3f, 0xfb, 0xfa, 0xe1, 0x12, 0x2a, 0x1d, 0xa7, 0x36, 0xf4, 0x25, 0x40, 0xfa,
	0x64, 0x25, 0x93, 0x54, 0x80, 0x70, 0x29, 0x3d, 0xe9, 0x79, 0xa8, 0x0d, 0x79, 0x45, 0x42, 0x2f,
	0xf6, 0xa7, 0xb6, 0xa8, 0x56, 0x04, 0xa7, 0x4e, 0x05, 0x8d, 0x44, 0x94, 0x05, 0x73, 0xd0, 0x0a,
	0x29, 0x34, 0x75, 0x7e, 0x03, 0x0d, 0x1d, 0x00, 0xa2, 0x3c, 0x1c, 0x06, 0x6c, 0xc9, 0x42, 0x3e,
	0x9a, 0x29, 0xb7, 0x8c, 0xff, 0x32, 0xa0, 0x71, 0xcb, 0xf8, 0x84, 0xd0, 0x73, 0x26, 0x5b, 0xf4,
	0x3c, 0xe2, 0x17, 0x01, 0xf3, 0x06, 0x2c, 0x64, 0x91, 0x44, 0x7d, 0x28, 0x88, 0x11, 0xa5, 0xc9,
	0xf8, 0x0d, 0x75, 0x0b, 0xdf, 0x3f, 0x78, 0x0b, 0x8b, 0x25, 0x4f, 0xb5, 0xff, 0x75, 0x06, 0xcf,
	0x4a, 0xa1, 0x63, 0x58, 0x65, 0x71, 0xcc, 0x67, 0x93, 0x7b, 0xfe, 0xd9, 0x35, 0xbb, 0x89, 0xfb,
	0x75, 0x06, 0xeb, 0x32, 0xed, 0x47, 0xb0, 0x41, 0xee, 0x36, 0x6e, 0x36, 0x61, 0xfb, 0x9e, 0x46,
	0xd0, 0x63, 0xc8, 0xc7, 0x4c, 0x8c, 0x02, 0xfd, 0xa6, 0x2d, 0xe3, 0x34, 0x32, 0x0f, 0x60, 0x6b,
	0xe9, 0xff, 0xa0, 0xcd, 0x59, 0xbb, 0x7a, 0xf7, 0x74, 0xb0, 0xff, 0x02, 0xf2, 0x7a, 0x1b, 0xd0,
	0x1a, 0x14, 0x7a, 0xc7, 0xbd, 0x7e, 0xaf, 0x75, 0x54, 0xcd, 0xa0, 0x22, 0xac, 0x9c, 0xfe, 0x72,
	0xdc, 0xa9, 0x1a, 0x08, 0x20, 0xdf, 0x69, 0x1d, 0x77, 0xba, 0x47, 0xd5, 0x2c, 0x2a, 0x43, 0xb1,
	0xf3, 0xf6, 0xcd, 0xc9, 0x51, 0xb7, 0xdf, 0xad, 0xe6, 0xda, 0x67, 0x1f, 0xae, 0xea, 0xc6, 0xc7,
	0xab, 0xba, 0xf1, 0xf7, 0x55, 0xdd, 0xf8, 0xfd, 0xba, 0x9e, 0xf9, 0x78, 0x5d, 0xcf, 0xfc, 0x79,
	0x5d, 0xcf, 0x9c, 0x1d, 0x0e, 0x7c, 0xf9, 0x6e, 0xe4, 0x5a, 0x94, 0x87, 0xb6, 0xef, 0x52, 0xf5,
	0x49, 0x9c, 0x5d, 0xc7, 0xcf, 0xed, 0x90, 0x7b, 0xa3, 0x80, 0x89, 0xe4, 0xf3, 0x29, 0xec, 0xe6,
	0xd3, 0xa7, 0x07, 0x9a, 0xd3, 0x81, 0xd2, 0xe5, 0xe5, 0x90, 0x09, 0x37, 0xaf, 0x3e, 0x71, 0xdf,
	0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xc2, 0x38, 0x56, 0x67, 0x07, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxFeeRate != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.MaxFeeRate))
		i--
		dAtA[i] = 0x10
	}
	if m.SwapEnabled {
		i--
		if m.SwapEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SwapMaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapMaker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapMaker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateTimestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.CreateTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DesiredTaker) > 0 {
		i -= len(m.DesiredTaker)
		copy(dAtA[i:], m.DesiredTaker)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.DesiredTaker)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MakerReceivingAddress) > 0 {
		i -= len(m.MakerReceivingAddress)
		copy(dAtA[i:], m.MakerReceivingAddress)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.MakerReceivingAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MakerAddress) > 0 {
		i -= len(m.MakerAddress)
		copy(dAtA[i:], m.MakerAddress)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.MakerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.BuyToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.SellToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapTaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapTaker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapTaker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateTimestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.CreateTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TakerReceivingAddress) > 0 {
		i -= len(m.TakerReceivingAddress)
		copy(dAtA[i:], m.TakerReceivingAddress)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.TakerReceivingAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TakerAddress) > 0 {
		i -= len(m.TakerAddress)
		copy(dAtA[i:], m.TakerAddress)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.TakerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.SellToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AtomicSwapOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtomicSwapOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtomicSwapOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompleteTimestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.CompleteTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.CancelTimestamp != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.CancelTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if m.Takers != nil {
		{
			size, err := m.Takers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Maker != nil {
		{
			size, err := m.Maker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AtomicSwapPacketAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtomicSwapPacketAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtomicSwapPacketAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Acknowledgement != nil {
		{
			size := m.Acknowledgement.Size()
			i -= size
			if _, err := m.Acknowledgement.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AtomicSwapPacketAcknowledgement_Success) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtomicSwapPacketAcknowledgement_Success) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Success != nil {
		{
			size, err := m.Success.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AtomicSwapPacketAcknowledgement_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtomicSwapPacketAcknowledgement_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AtomicSwapPacketSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtomicSwapPacketSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtomicSwapPacketSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AtomicSwapPacketError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtomicSwapPacketError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtomicSwapPacketError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapEnabled {
		n += 2
	}
	if m.MaxFeeRate != 0 {
		n += 1 + sovSwap(uint64(m.MaxFeeRate))
	}
	return n
}

func (m *SwapMaker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = m.SellToken.Size()
	n += 1 + l + sovSwap(uint64(l))
	l = m.BuyToken.Size()
	n += 1 + l + sovSwap(uint64(l))
	l = len(m.MakerAddress)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.MakerReceivingAddress)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.DesiredTaker)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.CreateTimestamp != 0 {
		n += 1 + sovSwap(uint64(m.CreateTimestamp))
	}
	return n
}

func (m *SwapTaker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = m.SellToken.Size()
	n += 1 + l + sovSwap(uint64(l))
	l = len(m.TakerAddress)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	l = len(m.TakerReceivingAddress)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.CreateTimestamp != 0 {
		n += 1 + sovSwap(uint64(m.CreateTimestamp))
	}
	return n
}

func (m *AtomicSwapOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.Maker != nil {
		l = m.Maker.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSwap(uint64(m.Status))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.Takers != nil {
		l = m.Takers.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.CancelTimestamp != 0 {
		n += 1 + sovSwap(uint64(m.CancelTimestamp))
	}
	if m.CompleteTimestamp != 0 {
		n += 1 + sovSwap(uint64(m.CompleteTimestamp))
	}
	return n
}

func (m *AtomicSwapPacketAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Acknowledgement != nil {
		n += m.Acknowledgement.Size()
	}
	return n
}

func (m *AtomicSwapPacketAcknowledgement_Success) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}
func (m *AtomicSwapPacketAcknowledgement_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}
func (m *AtomicSwapPacketSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}

func (m *AtomicSwapPacketError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}

func sovSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSwap(x uint64) (n int) {
	return sovSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeRate", wireType)
			}
			m.MaxFeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFeeRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapMaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapMaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapMaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuyToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerReceivingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerReceivingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredTaker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredTaker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			m.CreateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapTaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapTaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapTaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerReceivingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerReceivingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			m.CreateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtomicSwapOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtomicSwapOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtomicSwapOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Maker == nil {
				m.Maker = &SwapMaker{}
			}
			if err := m.Maker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Takers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Takers == nil {
				m.Takers = &SwapTaker{}
			}
			if err := m.Takers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelTimestamp", wireType)
			}
			m.CancelTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancelTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTimestamp", wireType)
			}
			m.CompleteTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtomicSwapPacketAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtomicSwapPacketAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtomicSwapPacketAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AtomicSwapPacketSuccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Acknowledgement = &AtomicSwapPacketAcknowledgement_Success{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AtomicSwapPacketError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Acknowledgement = &AtomicSwapPacketAcknowledgement_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtomicSwapPacketSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtomicSwapPacketSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtomicSwapPacketSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtomicSwapPacketError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtomicSwapPacketError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtomicSwapPacketError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSwap = fmt.Errorf("proto: unexpected end of group")
)
